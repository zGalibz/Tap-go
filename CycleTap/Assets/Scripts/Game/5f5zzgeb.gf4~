
using System.Collections.Generic;
using UnityEngine;

public class ObstacleController : MonoBehaviour
{
    public Transform gameMap;
    public GameObject[] obstacles;
    public float intervalMin = 6.0f, intervalMax = 10.0f;
    public float interval;
    public int MaxObjectSpawn = 4;
    public GameController gmc;

    private List<GameObject> m_Obstacles;
    public int b = 0;
    public bool g = true;
    #region Unity Functions
    private void Awake()
    {
        m_Obstacles = new List<GameObject>();
       
    }
    private void Update()
    {
        if (m_Obstacles.Count > 10)
        {
            g = false; 
        }
        //interval = 18f;//Random.Range(intervalMin, intervalMax);
    }
    #endregion

    #region Public Functions
    public void AddObstacle(int _progress)
    {
        if (g)
        {



            GameObject _prefab = GetRandomObstacle();
            if (!_prefab)
            {
                return;
            }

            GameObject _new = Instantiate(_prefab);
            _new.transform.parent = gameMap;
            float _z = interval * (_progress + 1);
            _new.transform.position = Vector3.forward * _z;

            m_Obstacles.Insert(0, _new);
        }
          

        
        
        
    }
    public void Reset()
    {
        for (int i = m_Obstacles.Count - 1; i >= 0; i--)
        {
            Destroy(m_Obstacles[i]);
            m_Obstacles.RemoveAt(i);
        }
    }
    public void DeleteObstacle()
    {
        if (m_Obstacles.Count > MaxObjectSpawn)
        {
            Destroy(m_Obstacles[m_Obstacles.Count - 1]);
            m_Obstacles.RemoveAt(m_Obstacles.Count - 1);
           

        }
        
    }
    #endregion

    #region Private Functions
    private GameObject GetRandomObstacle()
    {
        if (obstacles.Length == 0)
        {
            Debug.LogWarning("Trying to get a random obstacles, but no obstacles were found");
            return null;
        }
        int _random = Random.Range(0, obstacles.Length);
        return obstacles[_random];
    }
    #endregion
}
